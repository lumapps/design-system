@use "sass:map";

@mixin lumx-list() {
    padding: $lumx-spacing-unit 0;
    margin: 0;
    list-style: none;
    outline: none;
}

@mixin lumx-list-item($size) {
    display: flex;
    text-decoration: none;
    outline: none;

    @if $size == "huge" {
        align-items: flex-start;
        padding-top: $lumx-spacing-unit * 2;
        padding-bottom: $lumx-spacing-unit * 2;
    } @else {
        align-items: center;
        min-height: map.get($lumx-list-item-sizes, $size);
        padding-top: $lumx-spacing-unit;
        padding-bottom: $lumx-spacing-unit;
    }
}

@mixin lumx-list-item-clickable() {
    @include lumx-state("state-default", "emphasis-low", "dark");

    cursor: pointer;

    &[data-focus-visible-added] {
        outline: 2px solid lumx-color-variant("dark", "N");
        outline-offset: -2px;
    }

    &:hover,
    &[data-lumx-hover],
    &[data-focus-visible-added] {
        @include lumx-state("state-hover", "emphasis-low", "dark");
    }

    &:active,
    &[data-lumx-active], {
        @include lumx-state("state-active", "emphasis-low", "dark");
    }
}

@mixin lumx-list-item-highlighted() {
    cursor: pointer;

    @include lumx-state("state-hover", "emphasis-low", "dark");

    &:active {
        @include lumx-state("state-active", "emphasis-low", "dark");
    }
}

@mixin lumx-list-item-selected($component: null) {
    @include lumx-state-as-selected("state-default", "theme-light", $component);

    &:hover,
    &[data-lumx-hover],
    &[data-focus-visible-added] {
        @include lumx-state-as-selected("state-hover", "theme-light", $component);
    }

    &:active,
    &[data-lumx-active], {
        @include lumx-state-as-selected("state-active", "theme-light", $component);
    }
}

@mixin lumx-list-item-edge($size) {
    display: flex;
    flex-shrink: 0;
    justify-content: center;
}

@mixin lumx-list-item-before($size) {
    @include lumx-list-item-edge($size);

    @if $size == "tiny" {
        width: map.get($lumx-sizes, "s");
        margin-right: $lumx-spacing-unit;
    } @else {
        width: map.get($lumx-sizes, "m");
        margin-right: $lumx-spacing-unit * 2;
    }
}

@mixin lumx-list-item-content() {
    @include lumx-typography("body1");

    flex: 1 1 auto;
}

@mixin lumx-list-item-after($size) {
    @include lumx-list-item-edge($size);

    @if $size == "tiny" {
        margin-left: $lumx-spacing-unit;
    } @else {
        margin-left: $lumx-spacing-unit * 2;
    }
}

@mixin lumx-list-subheader() {
    @include lumx-typography("overline");

    display: flex;
    align-items: center;
    height: map.get($lumx-list-item-sizes, "tiny");
    color: lumx-color-variant("dark", "L2");
}

@mixin lumx-list-subheader-icon {
    @include lumx-icon-size("xxs");

    margin-right: $lumx-spacing-unit;
}

@mixin lumx-list-divider() {
    height: 1px;
    margin: $lumx-spacing-unit 0;
    background-color: lumx-color-variant("dark", $lumx-divider-color-variant);
}

@mixin lumx-list-item-padding($size) {
    @if $size == "big" {
        padding-right: $lumx-spacing-unit * 2;
        padding-left: $lumx-spacing-unit * 2;
    } @else if $size == "huge" {
        padding-right: $lumx-spacing-unit * 3;
        padding-left: $lumx-spacing-unit * 3;
    }
}
