@mixin lumx-button-base() {
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 0;
    border: none;
    margin: 0;
    background-color: transparent;
    outline: none;
    text-decoration: none;
    user-select: none;
    vertical-align: top;

    &:hover {
        cursor: pointer;
    }
}

@mixin lumx-button-size($emphasis, $variant, $size) {
    height: map-get($lumx-sizes, $size);

    @if $variant == 'button' {
        border-radius: var(--lumx-border-radius);

        @if $emphasis == lumx-base-const('emphasis', 'HIGH') or $emphasis == lumx-base-const('emphasis', 'MEDIUM') {
            @if $size == lumx-base-const('size', 'M') {
                padding: 0 $lumx-spacing-unit * 2;
            } @else if $size == lumx-base-const('size', 'S') {
                padding: 0 $lumx-spacing-unit * 1.5;
            }
        } @else if $emphasis == lumx-base-const('emphasis', 'LOW') {
            padding: 0 $lumx-spacing-unit;
        }
    } @else if $variant == 'icon' {
        width: map-get($lumx-sizes, $size);
        border-radius: var(--lumx-button-variant-icon-border-radius);
    }
}

@mixin lumx-button-reduced-spacing($size, $icon-position) {
    @if $size == lumx-base-const('size', 'M') {
        @if $icon-position == lumx-base-const('position', 'LEFT') {
            padding-left: $lumx-spacing-unit * 1.5;
        } @else if $icon-position == lumx-base-const('position', 'RIGHT') {
            padding-right: $lumx-spacing-unit * 1.5;
        }
    } @else if $size == lumx-base-const('size', 'S') {
        @if $icon-position == lumx-base-const('position', 'LEFT') {
            padding-left: $lumx-spacing-unit;
        } @else if $icon-position == lumx-base-const('position', 'RIGHT') {
            padding-right: $lumx-spacing-unit;
        }
    }
}

@mixin lumx-button-color($emphasis, $color, $theme: null) {
    @include lumx-state(lumx-base-const('state', 'DEFAULT'), $emphasis, $color, $theme);

    &:hover {
        @include lumx-state(lumx-base-const('state', 'HOVER'), $emphasis, $color, $theme);
    }

    &:active {
        @include lumx-state(lumx-base-const('state', 'ACTIVE'), $emphasis, $color, $theme);
    }

    &[data-focus-visible-added] {
        @include lumx-state(lumx-base-const('state', 'FOCUS'), $emphasis, $color, $theme);
    }

    &:disabled,
    &[aria-disabled='true'] {
        @include lumx-state-disabled-input;
    }
}

@mixin lumx-button-is-selected($theme) {
    @include lumx-state-as-selected(lumx-base-const('state', 'DEFAULT'), $theme);

    &:hover {
        @include lumx-state-as-selected(lumx-base-const('state', 'HOVER'), $theme);
    }

    &:active {
        @include lumx-state-as-selected(lumx-base-const('state', 'ACTIVE'), $theme);
    }

    &[data-focus-visible-added] {
        @include lumx-state-as-selected(lumx-base-const('state', 'FOCUS'), $theme);
    }
}

@mixin lumx-button($emphasis, $variant, $size, $color, $theme: null, $icon-position: null) {
    @include lumx-state-transition;
    @include lumx-button-base;
    @include lumx-button-size($emphasis, $variant, $size);

    @if $icon-position {
        @include lumx-button-reduced-spacing($size, $icon-position);
    }

    @include lumx-button-color($emphasis, $color, $theme);

    & > i {
        @include lumx-button-icon($variant, $size, $icon-position);
    }

    & > span {
        @include lumx-button-text($size);
    }
}

@mixin lumx-button-icon($variant, $size, $position: null) {
    width: map-get($lumx-button-icon-sizes, $size);
    height: map-get($lumx-button-icon-sizes, $size);
    font-size: map-get($lumx-button-icon-sizes, $size);
    line-height: map-get($lumx-button-icon-sizes, $size);
    pointer-events: none;

    @if $variant == 'button' {
        @if $position == lumx-base-const('position', 'LEFT') {
            @if $size == lumx-base-const('size', 'M') {
                margin-right: $lumx-spacing-unit;
            } @else if $size == lumx-base-const('size', 'S') {
                margin-right: $lumx-spacing-unit / 2;
            }
        } @else if $position == lumx-base-const('position', 'RIGHT') {
            @if $size == lumx-base-const('size', 'M') {
                margin-left: $lumx-spacing-unit;
            } @else if $size == lumx-base-const('size', 'S') {
                margin-left: $lumx-spacing-unit / 2;
            }
        }
    }
}

@mixin lumx-button-text($size) {
    font-size: var(--lumx-button-size-#{$size}-font-size);
    font-weight: var(--lumx-button-font-weight);
    line-height: map-get($lumx-sizes, $size);
    pointer-events: none;
    text-transform: var(--lumx-button-text-transform);
}
