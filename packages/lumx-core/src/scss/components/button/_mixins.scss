@mixin lumx-button-base() {
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 0;
    border: none;
    margin: 0;
    background-color: transparent;
    outline: none;
    text-decoration: none;
    transition-duration: $lumx-state-transition-duration;
    transition-property: padding, border-radius, border-width, background-color, color, border-color;
    user-select: none;
    vertical-align: top;

    &:hover {
        cursor: pointer;
    }
}

@mixin lumx-button-size($emphasis, $variant, $size) {
    @if $size == lumx-base-const('size', 'M') {
        height: var(--lumx-button-height);
    } @else if $size == lumx-base-const('size', 'S') {
        height: calc(var(--lumx-button-height) / 1.5);
    }

    @if $variant == 'button' {
        border-radius: var(--lumx-button-border-radius);
    } @else if $variant == 'icon' {
        @if $size == lumx-base-const('size', 'M') {
            width: var(--lumx-button-height);
        } @else if $size == lumx-base-const('size', 'S') {
            width: calc(var(--lumx-button-height) / 1.5);
        }

        border-radius: var(--lumx-material-button-variant-icon-border-radius, var(--lumx-button-border-radius));
    }

    &::before {
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        border-width: var(--lumx-button-#{$emphasis}-state-default-border-width);
        border-style: solid;
        content: '';
        pointer-events: none;

        @if $variant == 'button' {
            border-radius: var(--lumx-button-border-radius);
        } @else if $variant == 'icon' {
            border-radius: var(--lumx-material-button-variant-icon-border-radius, var(--lumx-button-border-radius));
        }
    }

    @if $size == lumx-base-const('size', 'M') {
        padding: 0 var(--lumx-button-#{$emphasis}-state-default-padding-horizontal);
    } @else if $size == lumx-base-const('size', 'S') {
        padding: 0 calc(var(--lumx-button-#{$emphasis}-state-default-padding-horizontal) / 1.5);
    }

    &:hover {
        @if $size == lumx-base-const('size', 'M') {
            padding: 0 var(--lumx-button-#{$emphasis}-state-hover-padding-horizontal);
        } @else if $size == lumx-base-const('size', 'S') {
            padding: 0 calc(var(--lumx-button-#{$emphasis}-state-hover-padding-horizontal) / 1.5);
        }

        &::before {
            border-width: var(--lumx-button-#{$emphasis}-state-hover-border-width);
        }
    }

    &:active {
        @if $size == lumx-base-const('size', 'M') {
            padding: 0 var(--lumx-button-#{$emphasis}-state-active-padding-horizontal);
        } @else if $size == lumx-base-const('size', 'S') {
            padding: 0 calc(var(--lumx-button-#{$emphasis}-state-active-padding-horizontal) / 1.5);
        }

        &::before {
            border-width: var(--lumx-button-#{$emphasis}-state-active-border-width);
        }
    }
}

@mixin lumx-button-color($emphasis, $color, $theme: null) {
    @if $color == 'primary' and $emphasis == lumx-base-const('emphasis', 'HIGH') {
        background-color: var(--lumx-button-#{$emphasis}-state-default-#{$theme}-background-color);
        color: var(--lumx-button-#{$emphasis}-state-default-#{$theme}-color);
    } @else if $color == 'dark' and $emphasis != lumx-base-const('emphasis', 'HIGH') {
        background-color: var(--lumx-button-#{$emphasis}-state-default-theme-light-background-color);
        color: var(--lumx-button-#{$emphasis}-state-default-theme-light-color);
    } @else if $color == 'light' and $emphasis != lumx-base-const('emphasis', 'HIGH') {
        background-color: var(--lumx-button-#{$emphasis}-state-default-theme-dark-background-color);
        color: var(--lumx-button-#{$emphasis}-state-default-theme-dark-color);
    } @else {
        @include lumx-state(lumx-base-const('state', 'DEFAULT'), $emphasis, $color, $theme);
    }

    &::before {
        border-color: var(--lumx-button-#{$emphasis}-state-default-#{$theme}-border-color);
    }

    &:hover {
        @if $color == 'primary' and $emphasis == lumx-base-const('emphasis', 'HIGH') {
            background-color: var(--lumx-button-#{$emphasis}-state-hover-#{$theme}-background-color);
            color: var(--lumx-button-#{$emphasis}-state-hover-#{$theme}-color);
        } @else if $color == 'dark' and $emphasis != lumx-base-const('emphasis', 'HIGH') {
            background-color: var(--lumx-button-#{$emphasis}-state-hover-theme-light-background-color);
            color: var(--lumx-button-#{$emphasis}-state-hover-theme-light-color);
        } @else if $color == 'light' and $emphasis != lumx-base-const('emphasis', 'HIGH') {
            background-color: var(--lumx-button-#{$emphasis}-state-hover-theme-dark-background-color);
            color: var(--lumx-button-#{$emphasis}-state-hover-theme-dark-color);
        } @else {
            @include lumx-state(lumx-base-const('state', 'HOVER'), $emphasis, $color, $theme);
        }

        &::before {
            border-color: var(--lumx-button-#{$emphasis}-state-hover-#{$theme}-border-color);
        }
    }

    &:active {
        @if $color == 'primary' and $emphasis == lumx-base-const('emphasis', 'HIGH') {
            background-color: var(--lumx-button-#{$emphasis}-state-active-#{$theme}-background-color);
            color: var(--lumx-button-#{$emphasis}-state-active-#{$theme}-color);
        } @else if $color == 'dark' and $emphasis != lumx-base-const('emphasis', 'HIGH') {
            background-color: var(--lumx-button-#{$emphasis}-state-active-theme-light-background-color);
            color: var(--lumx-button-#{$emphasis}-state-active-theme-light-color);
        } @else if $color == 'light' and $emphasis != lumx-base-const('emphasis', 'HIGH') {
            background-color: var(--lumx-button-#{$emphasis}-state-active-theme-dark-background-color);
            color: var(--lumx-button-#{$emphasis}-state-active-theme-dark-color);
        } @else {
            @include lumx-state(lumx-base-const('state', 'ACTIVE'), $emphasis, $color, $theme);
        }

        &::before {
            border-color: var(--lumx-button-#{$emphasis}-state-active-#{$theme}-border-color);
        }
    }

    &[data-focus-visible-added] {
        @include lumx-state(lumx-base-const('state', 'FOCUS'), $emphasis, $color, $theme);
    }

    &:disabled,
    &[aria-disabled='true'] {
        @include lumx-state-disabled-input;
    }
}

@mixin lumx-button-is-selected($theme) {
    @include lumx-state-as-selected(lumx-base-const('state', 'DEFAULT'), $theme);

    &:hover {
        @include lumx-state-as-selected(lumx-base-const('state', 'HOVER'), $theme);
    }

    &:active {
        @include lumx-state-as-selected(lumx-base-const('state', 'ACTIVE'), $theme);
    }

    &[data-focus-visible-added] {
        @include lumx-state-as-selected(lumx-base-const('state', 'FOCUS'), $theme);
    }
}

@mixin lumx-button($emphasis, $variant, $size, $color, $theme: null, $icon-position: null) {
    @include lumx-state-transition;
    @include lumx-button-base;
    @include lumx-button-size($emphasis, $variant, $size);

    @if $icon-position {
        @include lumx-button-reduced-spacing($size, $icon-position);
    }

    @include lumx-button-color($emphasis, $color, $theme);

    & > i {
        @include lumx-button-icon($variant, $size, $icon-position);
    }

    & > span {
        @include lumx-button-text($size);
    }
}

@mixin lumx-button-icon($variant, $size, $position: null) {
    width: map-get($lumx-button-icon-sizes, $size);
    height: map-get($lumx-button-icon-sizes, $size);
    font-size: map-get($lumx-button-icon-sizes, $size);
    line-height: map-get($lumx-button-icon-sizes, $size);
    pointer-events: none;

    @if $variant == 'button' {
        @if $position == lumx-base-const('position', 'LEFT') {
            @if $size == lumx-base-const('size', 'M') {
                margin-right: $lumx-spacing-unit;
            } @else if $size == lumx-base-const('size', 'S') {
                margin-right: $lumx-spacing-unit / 2;
            }
        } @else if $position == lumx-base-const('position', 'RIGHT') {
            @if $size == lumx-base-const('size', 'M') {
                margin-left: $lumx-spacing-unit;
            } @else if $size == lumx-base-const('size', 'S') {
                margin-left: $lumx-spacing-unit / 2;
            }
        }
    }
}

@mixin lumx-button-text($size) {
    font-family: var(--lumx-typography-custom-button-size-#{$size}-font-family);
    font-size: var(--lumx-typography-custom-button-size-#{$size}-font-size);
    font-weight: var(--lumx-typography-custom-button-size-#{$size}-font-weight);
    pointer-events: none;
    text-transform: var(--lumx-material-button-text-transform);

    @if $size == lumx-base-const('size', 'M') {
        line-height: var(--lumx-button-height);
    } @else if $size == lumx-base-const('size', 'S') {
        line-height: calc(var(--lumx-button-height) / 1.5);
    }
}
