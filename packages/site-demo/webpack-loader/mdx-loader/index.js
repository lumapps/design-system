const mdx = require('@mdx-js/mdx');

const mdxBreakLine = require('./mdx-break-line');
const mdxDemoCodeExtractor = require('./mdx-demo-code-extractor');
const mdxInlineCode = require('./mdx-inline-code');

// Imports needed in generated code.
const IMPORT_REACT_FRAGMENT = 'import React, { Fragment } from "react"';

/**
 * Removes reference to MDX in JSX code (removes wrapper, mdxType prop, etc.)
 * @param  {string} jsx JSX code generated by MDX
 * @return {string} JSX code without MDX references.
 */
function removeMDX(jsx) {
    return jsx
        .replace(/<(\/?)MDXLayout[^>]*>/g, '<$1Fragment>')
        .replace(/mdxType="[^"]*"/g, '')
        .replace(/parentName="[^"]*"/g, '')
        .replace('/* @jsx mdx */', '');
}

/**
 * A custom MDX loader that transforms MDX to JSX and also:
 *
 * - Removes the MDX wrappers (MDXLayout & co.)
 * - Removes the injected `mdxType`.
 *
 * @param {string}         source MDX source code.
 * @return {Promise<void>} Void promise when the MDX code transformation finished.
 */
module.exports = async function mdxLoader(source) {
    const cb = this.async();
    // MDX to JSX.
    const jsx = await mdx(source, {
        remarkPlugins: [mdxDemoCodeExtractor(this.resourcePath)],
        rehypePlugins: [mdxBreakLine, mdxInlineCode],
        preserveNewlines: true,
    });

    // Modified JSX.
    const jsx2 = IMPORT_REACT_FRAGMENT + removeMDX(jsx);
    cb(null, jsx2);
};
